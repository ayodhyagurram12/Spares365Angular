/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/render", ["require", "exports", "fs", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    const fs = require("fs");
    const path = require("path");
    const [indexHtml, indexFile, serverBundlePath, browserOutputPath, ...routes] = process.argv.slice(2);
    /**
     * Handles importing the server bundle.
     */
    function getServerBundle(bundlePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const { AppServerModule, AppServerModuleNgFactory, renderModule, renderModuleFactory, } = yield __syncRequire ? Promise.resolve().then(() => require(bundlePath)) : new Promise((resolve_1, reject_1) => { require([bundlePath], resolve_1, reject_1); });
            if (renderModuleFactory && AppServerModuleNgFactory) {
                // Happens when in ViewEngine mode.
                return {
                    renderModuleFn: renderModuleFactory,
                    AppServerModuleDef: AppServerModuleNgFactory,
                };
            }
            if (renderModule && AppServerModule) {
                // Happens when in Ivy mode.
                return {
                    renderModuleFn: renderModule,
                    AppServerModuleDef: AppServerModule,
                };
            }
            throw new Error(`renderModule method and/or AppServerModule were not exported from: ${serverBundlePath}.`);
        });
    }
    /**
     * Renders each route in routes and writes them to <outputPath>/<route>/index.html.
     */
    // tslint:disable-next-line: no-floating-promises
    (() => __awaiter(void 0, void 0, void 0, function* () {
        const browserIndexOutputPath = path.join(browserOutputPath, indexFile);
        for (const route of routes) {
            const outputFolderPath = path.join(browserOutputPath, route);
            const outputIndexPath = path.join(outputFolderPath, 'index.html');
            try {
                const { renderModuleFn, AppServerModuleDef } = yield getServerBundle(serverBundlePath);
                const html = yield renderModuleFn(AppServerModuleDef, {
                    document: indexHtml + '<!-- This page was prerendered with Angular Universal -->',
                    url: route,
                });
                fs.mkdirSync(outputFolderPath, { recursive: true });
                fs.writeFileSync(outputIndexPath, html);
                // This case happens when we are prerendering "/".
                if (browserIndexOutputPath === outputIndexPath) {
                    const browserIndexOutputPathOriginal = path.join(browserOutputPath, 'index.original.html');
                    fs.writeFileSync(browserIndexOutputPathOriginal, indexHtml);
                }
                if (process.send) {
                    process.send({ success: true, outputIndexPath });
                }
            }
            catch (e) {
                if (process.send) {
                    process.send({ success: false, error: e.message, outputIndexPath });
                }
                return;
            }
        }
    }))();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9idWlsZGVycy9zcmMvcHJlcmVuZGVyL3JlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCx5QkFBeUI7SUFDekIsNkJBQTZCO0lBRTdCLE1BQU0sQ0FDSixTQUFTLEVBQ1QsU0FBUyxFQUNULGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsR0FBRyxNQUFNLENBQ1YsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUUxQjs7T0FFRztJQUNILFNBQWUsZUFBZSxDQUFDLFVBQWtCOztZQUMvQyxNQUFNLEVBQ0osZUFBZSxFQUNmLHdCQUF3QixFQUN4QixZQUFZLEVBQ1osbUJBQW1CLEdBQ3BCLEdBQUcsMkRBQWEsVUFBVSxxREFBVixVQUFVLDJCQUFDLENBQUM7WUFFN0IsSUFBSSxtQkFBbUIsSUFBSSx3QkFBd0IsRUFBRTtnQkFDbkQsbUNBQW1DO2dCQUNuQyxPQUFPO29CQUNMLGNBQWMsRUFBRSxtQkFBbUI7b0JBQ25DLGtCQUFrQixFQUFFLHdCQUF3QjtpQkFDN0MsQ0FBQzthQUNIO1lBRUQsSUFBSSxZQUFZLElBQUksZUFBZSxFQUFFO2dCQUNuQyw0QkFBNEI7Z0JBQzVCLE9BQU87b0JBQ0wsY0FBYyxFQUFFLFlBQVk7b0JBQzVCLGtCQUFrQixFQUFFLGVBQWU7aUJBQ3BDLENBQUM7YUFDSDtZQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsc0VBQXNFLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUM3RyxDQUFDO0tBQUE7SUFFRDs7T0FFRztJQUNILGlEQUFpRDtJQUNqRCxDQUFDLEdBQVMsRUFBRTtRQUNWLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN2RSxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUMxQixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0QsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztZQUVsRSxJQUFJO2dCQUNGLE1BQU0sRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUV2RixNQUFNLElBQUksR0FBRyxNQUFNLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRTtvQkFDcEQsUUFBUSxFQUFFLFNBQVMsR0FBRywyREFBMkQ7b0JBQ2pGLEdBQUcsRUFBRSxLQUFLO2lCQUNYLENBQUMsQ0FBQztnQkFFSCxFQUFFLENBQUMsU0FBUyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBQ3BELEVBQUUsQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUV4QyxrREFBa0Q7Z0JBQ2xELElBQUksc0JBQXNCLEtBQUssZUFBZSxFQUFFO29CQUM5QyxNQUFNLDhCQUE4QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUscUJBQXFCLENBQUMsQ0FBQztvQkFDM0YsRUFBRSxDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsRUFBRSxTQUFTLENBQUMsQ0FBQztpQkFDN0Q7Z0JBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO29CQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO2lCQUNsRDthQUNGO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO29CQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO2lCQUNyRTtnQkFFRCxPQUFPO2FBQ1I7U0FDRjtJQUNILENBQUMsQ0FBQSxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5jb25zdCBbXG4gIGluZGV4SHRtbCxcbiAgaW5kZXhGaWxlLFxuICBzZXJ2ZXJCdW5kbGVQYXRoLFxuICBicm93c2VyT3V0cHV0UGF0aCxcbiAgLi4ucm91dGVzXG5dID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG4vKipcbiAqIEhhbmRsZXMgaW1wb3J0aW5nIHRoZSBzZXJ2ZXIgYnVuZGxlLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJCdW5kbGUoYnVuZGxlUGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IHtcbiAgICBBcHBTZXJ2ZXJNb2R1bGUsXG4gICAgQXBwU2VydmVyTW9kdWxlTmdGYWN0b3J5LFxuICAgIHJlbmRlck1vZHVsZSxcbiAgICByZW5kZXJNb2R1bGVGYWN0b3J5LFxuICB9ID0gYXdhaXQgaW1wb3J0KGJ1bmRsZVBhdGgpO1xuXG4gIGlmIChyZW5kZXJNb2R1bGVGYWN0b3J5ICYmIEFwcFNlcnZlck1vZHVsZU5nRmFjdG9yeSkge1xuICAgIC8vIEhhcHBlbnMgd2hlbiBpbiBWaWV3RW5naW5lIG1vZGUuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbmRlck1vZHVsZUZuOiByZW5kZXJNb2R1bGVGYWN0b3J5LFxuICAgICAgQXBwU2VydmVyTW9kdWxlRGVmOiBBcHBTZXJ2ZXJNb2R1bGVOZ0ZhY3RvcnksXG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZW5kZXJNb2R1bGUgJiYgQXBwU2VydmVyTW9kdWxlKSB7XG4gICAgLy8gSGFwcGVucyB3aGVuIGluIEl2eSBtb2RlLlxuICAgIHJldHVybiB7XG4gICAgICByZW5kZXJNb2R1bGVGbjogcmVuZGVyTW9kdWxlLFxuICAgICAgQXBwU2VydmVyTW9kdWxlRGVmOiBBcHBTZXJ2ZXJNb2R1bGUsXG4gICAgfTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgcmVuZGVyTW9kdWxlIG1ldGhvZCBhbmQvb3IgQXBwU2VydmVyTW9kdWxlIHdlcmUgbm90IGV4cG9ydGVkIGZyb206ICR7c2VydmVyQnVuZGxlUGF0aH0uYCk7XG59XG5cbi8qKlxuICogUmVuZGVycyBlYWNoIHJvdXRlIGluIHJvdXRlcyBhbmQgd3JpdGVzIHRoZW0gdG8gPG91dHB1dFBhdGg+Lzxyb3V0ZT4vaW5kZXguaHRtbC5cbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1mbG9hdGluZy1wcm9taXNlc1xuKGFzeW5jICgpID0+IHtcbiAgY29uc3QgYnJvd3NlckluZGV4T3V0cHV0UGF0aCA9IHBhdGguam9pbihicm93c2VyT3V0cHV0UGF0aCwgaW5kZXhGaWxlKTtcbiAgZm9yIChjb25zdCByb3V0ZSBvZiByb3V0ZXMpIHtcbiAgICBjb25zdCBvdXRwdXRGb2xkZXJQYXRoID0gcGF0aC5qb2luKGJyb3dzZXJPdXRwdXRQYXRoLCByb3V0ZSk7XG4gICAgY29uc3Qgb3V0cHV0SW5kZXhQYXRoID0gcGF0aC5qb2luKG91dHB1dEZvbGRlclBhdGgsICdpbmRleC5odG1sJyk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyByZW5kZXJNb2R1bGVGbiwgQXBwU2VydmVyTW9kdWxlRGVmIH0gPSBhd2FpdCBnZXRTZXJ2ZXJCdW5kbGUoc2VydmVyQnVuZGxlUGF0aCk7XG5cbiAgICAgIGNvbnN0IGh0bWwgPSBhd2FpdCByZW5kZXJNb2R1bGVGbihBcHBTZXJ2ZXJNb2R1bGVEZWYsIHtcbiAgICAgICAgZG9jdW1lbnQ6IGluZGV4SHRtbCArICc8IS0tIFRoaXMgcGFnZSB3YXMgcHJlcmVuZGVyZWQgd2l0aCBBbmd1bGFyIFVuaXZlcnNhbCAtLT4nLFxuICAgICAgICB1cmw6IHJvdXRlLFxuICAgICAgfSk7XG5cbiAgICAgIGZzLm1rZGlyU3luYyhvdXRwdXRGb2xkZXJQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMob3V0cHV0SW5kZXhQYXRoLCBodG1sKTtcblxuICAgICAgLy8gVGhpcyBjYXNlIGhhcHBlbnMgd2hlbiB3ZSBhcmUgcHJlcmVuZGVyaW5nIFwiL1wiLlxuICAgICAgaWYgKGJyb3dzZXJJbmRleE91dHB1dFBhdGggPT09IG91dHB1dEluZGV4UGF0aCkge1xuICAgICAgICBjb25zdCBicm93c2VySW5kZXhPdXRwdXRQYXRoT3JpZ2luYWwgPSBwYXRoLmpvaW4oYnJvd3Nlck91dHB1dFBhdGgsICdpbmRleC5vcmlnaW5hbC5odG1sJyk7XG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoYnJvd3NlckluZGV4T3V0cHV0UGF0aE9yaWdpbmFsLCBpbmRleEh0bWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5zZW5kKSB7XG4gICAgICAgIHByb2Nlc3Muc2VuZCh7IHN1Y2Nlc3M6IHRydWUsIG91dHB1dEluZGV4UGF0aCB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5zZW5kKSB7XG4gICAgICAgIHByb2Nlc3Muc2VuZCh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZS5tZXNzYWdlLCBvdXRwdXRJbmRleFBhdGggfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn0pKCk7XG4iXX0=